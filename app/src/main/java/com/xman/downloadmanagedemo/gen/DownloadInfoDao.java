package com.xman.downloadmanagedemo.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xman.downloadmanagedemo.dao.DownloadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_INFO".
*/
public class DownloadInfoDao extends AbstractDao<DownloadInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_INFO";

    /**
     * Properties of entity DownloadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DownloadId = new Property(1, String.class, "downloadId", false, "DOWNLOAD_ID");
        public final static Property DownloadStatus = new Property(2, int.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property MFileSize = new Property(3, long.class, "mFileSize", false, "M_FILE_SIZE");
        public final static Property CurrentSize = new Property(4, long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property SaveName = new Property(5, String.class, "saveName", false, "SAVE_NAME");
        public final static Property SaveDir = new Property(6, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property DownloadUrl = new Property(7, String.class, "downloadUrl", false, "DOWNLOAD_URL");
    }


    public DownloadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DOWNLOAD_ID\" TEXT," + // 1: downloadId
                "\"DOWNLOAD_STATUS\" INTEGER NOT NULL ," + // 2: downloadStatus
                "\"M_FILE_SIZE\" INTEGER NOT NULL ," + // 3: mFileSize
                "\"CURRENT_SIZE\" INTEGER NOT NULL ," + // 4: currentSize
                "\"SAVE_NAME\" TEXT," + // 5: saveName
                "\"SAVE_DIR\" TEXT," + // 6: saveDir
                "\"DOWNLOAD_URL\" TEXT);"); // 7: downloadUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadId = entity.getDownloadId();
        if (downloadId != null) {
            stmt.bindString(2, downloadId);
        }
        stmt.bindLong(3, entity.getDownloadStatus());
        stmt.bindLong(4, entity.getMFileSize());
        stmt.bindLong(5, entity.getCurrentSize());
 
        String saveName = entity.getSaveName();
        if (saveName != null) {
            stmt.bindString(6, saveName);
        }
 
        String saveDir = entity.getSaveDir();
        if (saveDir != null) {
            stmt.bindString(7, saveDir);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String downloadId = entity.getDownloadId();
        if (downloadId != null) {
            stmt.bindString(2, downloadId);
        }
        stmt.bindLong(3, entity.getDownloadStatus());
        stmt.bindLong(4, entity.getMFileSize());
        stmt.bindLong(5, entity.getCurrentSize());
 
        String saveName = entity.getSaveName();
        if (saveName != null) {
            stmt.bindString(6, saveName);
        }
 
        String saveDir = entity.getSaveDir();
        if (saveDir != null) {
            stmt.bindString(7, saveDir);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(8, downloadUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadInfo readEntity(Cursor cursor, int offset) {
        DownloadInfo entity = new DownloadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // downloadId
            cursor.getInt(offset + 2), // downloadStatus
            cursor.getLong(offset + 3), // mFileSize
            cursor.getLong(offset + 4), // currentSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // saveName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // saveDir
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // downloadUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDownloadId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDownloadStatus(cursor.getInt(offset + 2));
        entity.setMFileSize(cursor.getLong(offset + 3));
        entity.setCurrentSize(cursor.getLong(offset + 4));
        entity.setSaveName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSaveDir(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownloadUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
